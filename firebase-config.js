/**
 * ูุธุงู Firebase ุงูููุญุฏ ูุชุทุจูู "ุตุญุชู ุจุงูุฏููุง"
 * ูููุฑ ูุงุฌูุฉ ููุญุฏุฉ ููุชุนุงูู ูุน Firebase ูุชุฎุฒูู ุงูุจูุงูุงุช
 */

// ุงุณุชุฏุนุงุก ููู ุงูุฅุนุฏุงุฏุงุช
document.write('<script src="config/app-config.js"></script>');

// Firebase Configuration - ููู ูุดุชุฑู ูุฌููุน ุงูุตูุญุงุช
const firebaseConfig = {
    apiKey: "AIzaSyCdUHldUu83kfgc_qUn-h5rZ8xTl2rhNjA",
    authDomain: "healthy-wealthy-app.firebaseapp.com",
    projectId: "healthy-wealthy-app",
    storageBucket: "healthy-wealthy-app.appspot.com",
    messagingSenderId: "182436316225",
    appId: "1:182436316225:web:5cfd34f879204b12ebf2c0"
};

/**
 * ุฎุฏูุฉ Firebase ุงููุฑูุฒูุฉ
 * ุชููุฑ ูุงุฌูุฉ ููุญุฏุฉ ููุชุนุงูู ูุน Firebase ูุงูุชุฎุฒูู ุงููุญูู
 */
const firebaseService = {
    // ุงููุณุชุฎุฏู ุงูุญุงูู
    currentUser: null,
    
    // ุฎุงุตูุฉ ููุนุฑูุฉ ูุง ุฅุฐุง ุชู ุชููุฆุฉ ุงูุฎุฏูุฉ ุจูุฌุงุญ
    isInitialized: false,
    
    // ุชููุฆุฉ Firebase
    initialize: function() {
        console.log('๐ ูุธุงู Firebase ุงูููุญุฏ - ุฌุงุฑู ุงูุชููุฆุฉ...');
        
        try {
            // ุชุฌูุจ ุฅุนุงุฏุฉ ุชููุฆุฉ Firebase ุฅุฐุง ูุงูุช ุงูุชุทุจููุงุช ููุฌูุฏุฉ ุจุงููุนู
            if (firebase.apps.length === 0) {
                firebase.initializeApp(firebaseConfig);
            }
            
            this.db = firebase.firestore();
            const auth = firebase.auth();
            
            // ูุฑุงูุจุฉ ุญุงูุฉ ุงููุณุชุฎุฏู
            auth.onAuthStateChanged(user => this.handleAuthStateChange(user));
            
            // ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู ูุฎูุงุฑ ุงุญุชูุงุทู ุจุนุฏ ุชุฃุฎูุฑ ูุตูุฑ
            setTimeout(() => {
                if (!auth.currentUser) {
                    this.auth.signInAnonymously();
                }
            }, 2000);
            
            this.isInitialized = true;
            console.log('โ ุชู ุชููุฆุฉ Firebase ุจูุฌุงุญ');
            
            // ุฅุดุนุงุฑ ุจุงูุชูุงู ุงูุชููุฆุฉ
            window.dispatchEvent(new CustomEvent('firebaseInitialized'));
        } catch (error) {
            console.error('โ ูุดู ุชููุฆุฉ Firebase:', error);
            this.isInitialized = false;
        }
        
        return this;
    },
    
    // ูุนุงูุฌุฉ ุชุบููุฑุงุช ุญุงูุฉ ุงููุณุชุฎุฏู
    handleAuthStateChange: function(user) {
        this.currentUser = user;
        
        if (user) {
            localStorage.setItem(APP_CONFIG.storage.userId, user.uid);
            console.log('๐ ุงููุณุชุฎุฏู ุงูููุญุฏ ูุชุตู:', user.uid);
            
            // ุชุฎุฒูู ุตูุฑุฉ ุงููุณุชุฎุฏู ูู localStorage ุฅุฐุง ูุงูุช ูุชุงุญุฉ
            if (user.photoURL) {
                localStorage.setItem('user_photo_url', user.photoURL);
                console.log('๐ผ๏ธ ุชู ุชุฎุฒูู ุตูุฑุฉ ุงููุณุชุฎุฏู:', user.photoURL);
            }
            
            // ุฅุดุนุงุฑ ุฌููุน ุงูุตูุญุงุช ุจุชุณุฌูู ุงูุฏุฎูู
            window.dispatchEvent(new CustomEvent('userSignedIn', { detail: user }));
        } else {
            console.log('๐ ุงููุณุชุฎุฏู ุบูุฑ ูุชุตู - ุงุณุชุฎุฏุงู ูุถุน ูุญูู');
            
            // ุฅุดุนุงุฑ ุฌููุน ุงูุตูุญุงุช ุจุชุณุฌูู ุงูุฎุฑูุฌ
            window.dispatchEvent(new CustomEvent('userSignedOut'));
        }
    },
    
    // ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู
    anonymousSignIn: function() {
        // ููุท ุฅุฐุง ูู ููู ููุงู ูุณุชุฎุฏู ุญุงูู
        if (!this.currentUser) {
            this.auth.signInAnonymously()
                .then(() => {
                    console.log('โ ุชู ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู ุจูุฌุงุญ');
                })
                .catch(error => {
                    console.log('โ ูุดู ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู:', error.message);
                });
        }
    },
    
    // ุงูุญุตูู ุนูู ุงููุณุชุฎุฏู ุงูุญุงูู
    getCurrentUser: function() {
        return this.currentUser;
    },
    
    // ุงูุญุตูู ุนูู ูุนุฑู ุงููุณุชุฎุฏู
    getUserId: function() {
        if (this.currentUser && this.currentUser.uid) {
            return this.currentUser.uid;
        }
        
        // Fallback ููู localStorage
        let userId = localStorage.getItem(APP_CONFIG.storage.userId);
        if (!userId) {
            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem(APP_CONFIG.storage.userId, userId);
        }
        return userId;
    },
    
    // ุนูููุงุช ุงูุจูุงูุงุช
    data: {
        // ุญูุธ ุงูุจูุงูุงุช ูู Firebase ูุน ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู localStorage
        save: async function(collection, document, data) {
            const userId = firebaseService.getUserId();
            
            try {
                // ุชูููุฉ ุงูุจูุงูุงุช
                const sanitizedData = this._sanitizeData(data);
                
                // ุฅุถุงูุฉ ุทุงุจุน ุฒููู
                sanitizedData.updatedAt = firebase.firestore.FieldValue.serverTimestamp();
                
                if (firebaseService.currentUser) {
                    // ุญูุธ ูู Firebase
                    await firebaseService.db.collection('users')
                        .doc(userId)
                        .collection(collection)
                        .doc(document)
                        .set(sanitizedData);
                }
                
                // ุฏุงุฆููุง ุญูุธ ูู localStorage ููุณุฎุฉ ุงุญุชูุงุทูุฉ
                localStorage.setItem(`${userId}_${collection}_${document}`, JSON.stringify(sanitizedData));
                return true;
            } catch (error) {
                console.error(`ุฎุทุฃ ูู ุญูุธ ${collection}/${document}:`, error);
                // ูุญุงููุฉ ุงูุญูุธ ูุญูููุง ุนูู ุฃู ุญุงู
                localStorage.setItem(`${userId}_${collection}_${document}`, JSON.stringify(data));
                return false;
            }
        },
        
        // ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ูู Firebase ุฃู localStorage
        get: async function(collection, document) {
            const userId = firebaseService.getUserId();
            
            try {
                if (firebaseService.currentUser) {
                    // ูุญุงููุฉ ุงูุญุตูู ูู Firebase ุฃููุงู
                    const docRef = await firebaseService.db.collection('users')
                        .doc(userId)
                        .collection(collection)
                        .doc(document)
                        .get();
                        
                    if (docRef.exists) {
                        // ุชุฎุฒูู ูุญูู ููุชุฎุฒูู ุงููุคูุช
                        localStorage.setItem(`${userId}_${collection}_${document}`, JSON.stringify(docRef.data()));
                        return docRef.data();
                    }
                }
                
                // Fallback ููู localStorage
                const localData = localStorage.getItem(`${userId}_${collection}_${document}`);
                return localData ? JSON.parse(localData) : null;
            } catch (error) {
                console.error(`ุฎุทุฃ ูู ุงูุญุตูู ุนูู ${collection}/${document}:`, error);
                
                // Fallback ููู localStorage
                const localData = localStorage.getItem(`${userId}_${collection}_${document}`);
                return localData ? JSON.parse(localData) : null;
            }
        },
        
        // ุญุฐู ุงูุจูุงูุงุช
        delete: async function(collection, document) {
            const userId = firebaseService.getUserId();
            
            try {
                if (firebaseService.currentUser) {
                    // ุญุฐู ูู Firebase
                    await firebaseService.db.collection('users')
                        .doc(userId)
                        .collection(collection)
                        .doc(document)
                        .delete();
                }
                
                // ุญุฐู ูู localStorage
                localStorage.removeItem(`${userId}_${collection}_${document}`);
                return true;
            } catch (error) {
                console.error(`ุฎุทุฃ ูู ุญุฐู ${collection}/${document}:`, error);
                return false;
            }
        },
        
        // ุชูุธูู ูุชูููุฉ ุงูุจูุงูุงุช ูุจู ุงูุญูุธ
        _sanitizeData: function(data) {
            if (!data || typeof data !== 'object') {
                console.error('ุชูุณูู ุจูุงูุงุช ุบูุฑ ุตุงูุญ ููุญูุธ');
                return {};
            }
            
            // ูุณุฎุฉ ุฌุฏูุฏุฉ ูู ุงูุจูุงูุงุช
            const sanitized = {};
            
            // ุชูุธูู ูู ุญูู
            Object.entries(data).forEach(([key, value]) => {
                // ุฅุฒุงูุฉ ุฃู ุนูุงูุงุช script ุฃู ูุญุชูู ุฎุทูุฑ
                if (typeof value === 'string') {
                    sanitized[key] = value
                        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
                        .trim();
                } else if (value === null || value === undefined) {
                    // ุชุฌุงูู ุงูููู ุงููุงุฑุบุฉ
                    sanitized[key] = '';
                } else {
                    sanitized[key] = value;
                }
            });
            
            return sanitized;
        }
    },
    
    // ุนูููุงุช ุงููุตุงุฏูุฉ
    auth: {
        // ุชุณุฌูู ุงูุฏุฎูู ุจุงุณุชุฎุฏุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููููุฉ ุงููุฑูุฑ
        signInWithEmailAndPassword: async function(email, password) {
            try {
                const auth = firebase.auth();
                return await auth.signInWithEmailAndPassword(email, password);
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error.message);
                throw error;
            }
        },
        
        // ุฅูุดุงุก ุญุณุงุจ ุจุงุณุชุฎุฏุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููููุฉ ุงููุฑูุฑ
        createUserWithEmailAndPassword: async function(email, password) {
            try {
                const auth = firebase.auth();
                return await auth.createUserWithEmailAndPassword(email, password);
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ:', error.message);
                throw error;
            }
        },
        
        // ุชุณุฌูู ุงูุฏุฎูู ุจุงุณุชุฎุฏุงู ุญุณุงุจ Google
        signInWithGoogle: async function() {
            try {
                const auth = firebase.auth();
                const provider = new firebase.auth.GoogleAuthProvider();
                return await auth.signInWithPopup(provider);
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู ุจูุงุณุทุฉ Google:', error.message);
                throw error;
            }
        },
        
        // ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู
        signInAnonymously: async function() {
            try {
                const auth = firebase.auth();
                return await auth.signInAnonymously();
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู ุงููุฌููู:', error.message);
                throw error;
            }
        },
        
        // ุชุณุฌูู ุงูุฎุฑูุฌ
        signOut: async function() {
            try {
                const auth = firebase.auth();
                await auth.signOut();
                return true;
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฎุฑูุฌ:', error.message);
                throw error;
            }
        },
        
        // ุงุณุชุนุงุฏุฉ ูููุฉ ุงููุฑูุฑ
        resetPassword: async function(email) {
            try {
                const auth = firebase.auth();
                await auth.sendPasswordResetEmail(email);
                return true;
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุงุจุท ุงุณุชุนุงุฏุฉ ูููุฉ ุงููุฑูุฑ:', error.message);
                throw error;
            }
        },
        
        // ูุฑุงูุจุฉ ุชุบูุฑุงุช ุญุงูุฉ ุงููุตุงุฏูุฉ
        onAuthStateChanged: function(callback) {
            const auth = firebase.auth();
            return auth.onAuthStateChanged(callback);
        },
        
        // ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุฌู ุงูุฏุฎูู
        isAuthenticated: function() {
            const auth = firebase.auth();
            return auth.currentUser !== null;
        }
    },
    
    // ูุธุงุฆู ูุณุงุนุฏุฉ
    helpers: {
        // ุงูุญุตูู ุนูู ููุชุงุญ ุจูุงูุงุช ุงููุณุชุฎุฏู
        getUserDataKey: function(keyName) {
            return firebaseService.getUserId() + '_' + keyName;
        },
        
        // ุงูุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ุฃู ุชู ุชุฎุทููุง
        hasBasicInfo: async function() {
            const data = await firebaseService.data.get(
                APP_CONFIG.firebase.collections.medical, 
                APP_CONFIG.firebase.documents.basicInfo
            );
            // ุฅุฐุง ูุงู ููุงู ุฎุงุตูุฉ skipped=true ุงุนุชุจุฑ ุงูุจูุงูุงุช ุบูุฑ ููุชููุฉ
            if (data && data.skipped === true) return false;
            // ุชุญูู ูู ุฌููุน ุงูุญููู ุงููุทููุจุฉ
            if (data && data.fullName && data.birthDate && data.height && data.weight && data.waist && data.bloodType) {
                return true;
            }
            return false;
        },
        
        // ุชุฑุฌูุฉ ุฑุณุงุฆู ุฃุฎุทุงุก Firebase
        getLocalizedErrorMessage: function(error, lang = 'ar') {
            console.log("Error code:", error.code);
            
            if (!error || !error.code) {
                return lang === 'ar' ? 'ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุนุฑูู' : 'An unknown error occurred';
            }
            
            const errorMessages = {
                'auth/email-already-in-use': {
                    ar: 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุชุฎุฏู ุจุงููุนู',
                    en: 'Email is already in use'
                },
                'auth/invalid-email': {
                    ar: 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ',
                    en: 'Invalid email address'
                },
                'auth/user-not-found': {
                    ar: 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ',
                    en: 'User not found'
                },
                'auth/wrong-password': {
                    ar: 'ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ',
                    en: 'Incorrect password'
                },
                'auth/weak-password': {
                    ar: 'ูููุฉ ุงููุฑูุฑ ุถุนููุฉ ุฌุฏูุง',
                    en: 'Password is too weak'
                },
                'auth/popup-closed-by-user': {
                    ar: 'ุชู ุฅุบูุงู ูุงูุฐุฉ ุชุณุฌูู ุงูุฏุฎูู',
                    en: 'Sign-in popup was closed'
                },
                'auth/popup-blocked': {
                    ar: 'ุชู ุญุธุฑ ุงููุงูุฐุฉ ุงูููุจุซูุฉ. ูุฑุฌู ุงูุณูุงุญ ุจุงูููุงูุฐ ุงูููุจุซูุฉ ููุฐุง ุงููููุน',
                    en: 'Popup was blocked. Please allow popups for this site'
                },
                'auth/too-many-requests': {
                    ar: 'ุชู ุชุฌุงูุฒ ุนุฏุฏ ุงููุญุงููุงุช ุงููุณููุญ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุงุญููุง',
                    en: 'Too many requests. Please try again later'
                },
                'auth/network-request-failed': {
                    ar: 'ูุดู ุงูุงุชุตุงู ุจุงูุดุจูุฉ. ุชุญูู ูู ุงุชุตุงูู ุจุงูุฅูุชุฑูุช',
                    en: 'Network request failed. Check your internet connection'
                }
            };
            
            const errorObj = errorMessages[error.code];
            if (errorObj) {
                return errorObj[lang] || errorObj.en || error.message;
            }
            
            return error.message || (lang === 'ar' ? 'ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุนุฑูู' : 'An unknown error occurred');
        }
    }
};

// ุชุฃูุฏ ูู ูุฌูุฏ ูุงุฆู Firebase ูุจู ุงูุชููุฆุฉ
if (typeof firebase !== 'undefined') {
    // ุชููุฆุฉ ุงูุฎุฏูุฉ ููุฑูุง
    firebaseService.initialize();
    
    // ูุดู ุงูุฎุฏูุฉ ุนุงููููุง
    window.firebaseService = firebaseService;
    
    console.log('๐ง ุชู ุชุญููู ูุธุงู Firebase ุงูููุญุฏ');
} else {
    console.error('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ูุงุฆู Firebase! ุชุฃูุฏ ูู ุชุญููู ููุชุจุงุช Firebase ุจุดูู ุตุญูุญ.');
    
    // ุฅูุดุงุก ูุงุฆู firebaseService ูุงุฑุบ ูุชุฌูุจ ุงูุฃุฎุทุงุก
    window.firebaseService = {
        isInitialized: false,
        initialize: function() {
            console.error('โ ูุง ูููู ุชููุฆุฉ Firebase: ุงูููุชุจุฉ ุบูุฑ ููุฌูุฏุฉ.');
            return this;
        },
        auth: {
            signInWithEmailAndPassword: async function() { throw new Error('Firebase ุบูุฑ ูุชุงุญ'); },
            createUserWithEmailAndPassword: async function() { throw new Error('Firebase ุบูุฑ ูุชุงุญ'); },
            signInWithGoogle: async function() { throw new Error('Firebase ุบูุฑ ูุชุงุญ'); },
            signOut: async function() { return true; },
            resetPassword: async function() { throw new Error('Firebase ุบูุฑ ูุชุงุญ'); }
        }
    };
}

// ุฅุถุงูุฉ ูุนุงูุฌ ุฃุญุฏุงุซ ูุฅุนุงุฏุฉ ุงููุญุงููุฉ ูู ุญุงู ูุดู ุงูุชุญููู
window.addEventListener('load', function() {
    setTimeout(() => {
        if (typeof firebase !== 'undefined' && !firebaseService.isInitialized) {
            console.log('๐ ุฅุนุงุฏุฉ ูุญุงููุฉ ุชููุฆุฉ Firebase ุจุนุฏ ุงูุชุญููู ุงููุงูู ููุตูุญุฉ...');
            firebaseService.initialize();
        }
    }, 2000);
});